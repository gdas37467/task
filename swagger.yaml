openapi: 3.0.0

info:
  title: Your API Title
  version: 1.0.0
servers:
  - url: http://localhost:3000/

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT
   
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
    
    ReimbursementRequest:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Date of the reimbursement request
        amount:
          type: number
          description: Amount of the reimbursement request
        paymentType:
          type: string
          enum: ['cash', 'creditCard', 'debitCard']
          description: Type of payment
        outOfPocket:
          type: array
          items:
            type: string
            enum: ['food', 'lodging', 'other']
          description: Out-of-pocket expenses
        materialTransportation:
          type: string
          description: Material transportation details
        otherReason:
          type: string
          description: Other reason for reimbursement
        raisedBy:
          type: string
          description: Employee's mongodb object id
        remarks:
          type: string
          description: Additional remarks for the reimbursement request
    
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user
        password:
          type: string
          description: User password (min length- 8 characters)
        role:
          type: string
          enum: ["admin", "employee"]
          description: User role (admin or employee)
        fname:
          type: string
          description: Full name of the user
      required:
        - email
        - password
        - role
        - fname
    
  responses:
    UnauthorizedError:
      description: Access token is missing
      content:
            application/json:
              example:
                error: Token Missing
    ForbiddenError:
      description: The user does not have permission to access this resource.
      content:
            application/json:
              example:
                error: Invalid Token
  
security:
  - bearerAuth: []

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
              
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              example:
                message: "User registered successfully"
        '400':
          description: Validation error
          content:
            application/json:
              example:
                error: "Validation error"
                details:
                  - code: <error_code_1>
                    path:
                      - <path_1>
                    message: <error_message_1>
                  - code: <error_code_2>
                    path:
                      - <path_2>
                    message: <error_message_2>
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: "Internal Server Error"

  /login:
    post:
      summary: User Login
      tags:
        - Employee Requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns a token
          content:
            application/json:
              example:
                token: <your_token_value>
        '401':
          description: Invalid username or password
          content:
            application/json:
              example:
                error: Invalid username or password

  /logout:
    post:
      summary: User Logout
      tags:
        - Employee Requests
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              example:
                message: Logout successful
  
  /submit-reimbursement:
    post:
    
      summary: Submit Reimbursement Request
      tags:
        - Employee Requests
   
      description: |
        To authenticate, include a Bearer token in the "Authorization" header.

        Example:
        ```
        Authorization: Bearer <your_token_value>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReimbursementRequest'
      responses:
        '201':
          description: Reimbursement request submitted successfully
          content:
            application/json:
              example:
                message: Reimbursement request submitted successfully
        '400':
          description: Validation error
          content:
            application/json:
              example:
                error: Validation error
                details:
                  - code: <error_code_1>
                    path:
                      - <path_1>
                    message: <error_message_1>
                  - code: <error_code_2>
                    path:
                      - <path_2>
                    message: <error_message_2>
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: Internal Server Error
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  
  
  /admin/requests:
    get:
      summary: Get all reimbursement requests for admins
      tags:
        - Admin Requests
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              example:
                - _id: "5f551fca0c4ae58a080d3601"
                  date: "2022-01-01"
                  amount: 100.0
                  paymentType: "cash"
                  raisedBy: { fname: "John", email: "john@example.com" }
                  remarks: "Test request"
                  status: "pending"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'     

  /admin/requests/filter:
    get:
      summary: Filter reimbursement requests by employee name or status
  
      tags:
        - Admin Requests
      parameters:
        - name: employeeName
          in: query
          description: Employee name to filter requests
          schema:
            type: string
        - name: status
          in: query
          description: Status to filter requests
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                - _id: "5f551fca0c4ae58a080d3601"
                  date: "2022-01-01"
                  amount: 100.0
                  paymentType: "cash"
                  raisedBy: { fname: "John", email: "john@example.com" }
                  remarks: "Test request"
                  status: "pending"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: Internal Server Error
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /admin/requests/{id}:
    patch:
      summary: Accept or reject a reimbursement request by ID

      tags:
        - Admin Requests
      parameters:
        - name: id
          in: path
          description: ID of the reimbursement request to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: ['pending','approved', 'rejected']
                  description: Status of the request (enum:pending, approved, rejected)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: "Reimbursement request accepted successfully"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                error: Internal Server Error
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'  
